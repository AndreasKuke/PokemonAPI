### A simple get request to the test endpoint. No need for login
GET {{url}}/auth/test/

### Populate the database with some data
GET {{url}}/pokemon/populate/

### Create Pokemon
POST {{url}}/pokemon
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
"id": 152,
"name": "chikorita",
"types": [
  {
    "type": {
      "name": "grass"
    }
  }
]
}


### Get all pokemon
GET {{url}}/pokemon

### Get pokemon by id. Change number to id you want
GET {{url}}/pokemon/150

### Update pokemon by id. Change number to id you want
PUT {{url}}/pokemon/151
Content-Type: application/json

{
  "id": 151,
  "name": "updated",
  "types": [
    {
      "type": {
        "name": "grass"
      }
    }
  ]
}

### Delete pokemon by id. Change number to id you want
DELETE {{url}}/pokemon/152

###  Create a new user - this one will only get a USER role by default
POST {{url}}/auth/register/

{
    "username": "user2",
    "password": "test123"
}

### Login with user. Creates token
POST {{url}}/auth/login/

{
    "username": "user2",
    "password": "test123"
}

> {%
    client.global.set("jwt_token", response.body.token);
    console.log("JWT Token:", client.global.get("jwt_token"));
%}

### Tests a user role and its access
GET {{url}}/protected/user_demo/
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Test a user role and it's access. Admin is required
GET {{url}}/protected/admin_demo/
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Add admin role to user
POST {{url}}/auth/user/addrole/
Accept: application/json
Authorization: Bearer {{jwt_token}}

{
    "role": "admin"
}
Accept: application/json
Authorization: Bearer {{jwt_token}}

### Add pokemon to a users pokedex
POST {{url}}/pokedex/151
Accept: application/json
Authorization: Bearer {{jwt_token}}